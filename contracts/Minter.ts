/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MinterInterface extends utils.Interface {
  functions: {
    "setPrices(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "post(string)": FunctionFragment;
    "post(string,uint256)": FunctionFragment;
    "like(uint256)": FunctionFragment;
    "setProfile(string,string,string)": FunctionFragment;
    "setProfile(string,string,string,string)": FunctionFragment;
    "setProfile(string,string,string,string,bool)": FunctionFragment;
    "setProfile(string,string,string,string,bool,address)": FunctionFragment;
    "setProfile(string,string,string,string,bool,address,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "isValidContract(string)": FunctionFragment;
    "postPriceInTokens()": FunctionFragment;
    "repostPriceInTokens()": FunctionFragment;
    "likeRewardsInTokens()": FunctionFragment;
    "likePrice()": FunctionFragment;
    "comission()": FunctionFragment;
    "profilePrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setPrices"
      | "post(string)"
      | "post(string,uint256)"
      | "like"
      | "setProfile(string,string,string)"
      | "setProfile(string,string,string,string)"
      | "setProfile(string,string,string,string,bool)"
      | "setProfile(string,string,string,string,bool,address)"
      | "setProfile(string,string,string,string,bool,address,uint256)"
      | "withdraw"
      | "isValidContract"
      | "postPriceInTokens"
      | "repostPriceInTokens"
      | "likeRewardsInTokens"
      | "likePrice"
      | "comission"
      | "profilePrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setPrices",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "post(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "post(string,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile(string,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile(string,string,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile(string,string,string,string,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile(string,string,string,string,bool,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile(string,string,string,string,bool,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isValidContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "postPriceInTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repostPriceInTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "likeRewardsInTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "likePrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "comission", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profilePrice",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "setPrices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "post(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "post(string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProfile(string,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfile(string,string,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfile(string,string,string,string,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfile(string,string,string,string,bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfile(string,string,string,string,bool,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postPriceInTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repostPriceInTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "likeRewardsInTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "comission", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profilePrice",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setPrices(
      _postPriceInTokens: PromiseOrValue<BigNumberish>,
      _repostPriceInTokens: PromiseOrValue<BigNumberish>,
      _likeRewardsInTokens: PromiseOrValue<BigNumberish>,
      _likePrice: PromiseOrValue<BigNumberish>,
      _comission: PromiseOrValue<BigNumberish>,
      _profilePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "post(string)"(
      _content: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "post(string,uint256)"(
      _content: PromiseOrValue<string>,
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    like(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProfile(string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProfile(string,string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProfile(string,string,string,string,bool)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProfile(string,string,string,string,bool,address)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProfile(string,string,string,string,bool,address,uint256)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      _nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValidContract(
      _type: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    postPriceInTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    repostPriceInTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    likeRewardsInTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    likePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    comission(overrides?: CallOverrides): Promise<[BigNumber]>;

    profilePrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  setPrices(
    _postPriceInTokens: PromiseOrValue<BigNumberish>,
    _repostPriceInTokens: PromiseOrValue<BigNumberish>,
    _likeRewardsInTokens: PromiseOrValue<BigNumberish>,
    _likePrice: PromiseOrValue<BigNumberish>,
    _comission: PromiseOrValue<BigNumberish>,
    _profilePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "post(string)"(
    _content: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "post(string,uint256)"(
    _content: PromiseOrValue<string>,
    parentId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  like(
    _itemId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProfile(string,string,string)"(
    _name: PromiseOrValue<string>,
    _username: PromiseOrValue<string>,
    _bio: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProfile(string,string,string,string)"(
    _name: PromiseOrValue<string>,
    _username: PromiseOrValue<string>,
    _bio: PromiseOrValue<string>,
    _imageUrl: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProfile(string,string,string,string,bool)"(
    _name: PromiseOrValue<string>,
    _username: PromiseOrValue<string>,
    _bio: PromiseOrValue<string>,
    _imageUrl: PromiseOrValue<string>,
    _isNft: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProfile(string,string,string,string,bool,address)"(
    _name: PromiseOrValue<string>,
    _username: PromiseOrValue<string>,
    _bio: PromiseOrValue<string>,
    _imageUrl: PromiseOrValue<string>,
    _isNft: PromiseOrValue<boolean>,
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProfile(string,string,string,string,bool,address,uint256)"(
    _name: PromiseOrValue<string>,
    _username: PromiseOrValue<string>,
    _bio: PromiseOrValue<string>,
    _imageUrl: PromiseOrValue<string>,
    _isNft: PromiseOrValue<boolean>,
    _nftContract: PromiseOrValue<string>,
    _nftTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValidContract(
    _type: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  postPriceInTokens(overrides?: CallOverrides): Promise<BigNumber>;

  repostPriceInTokens(overrides?: CallOverrides): Promise<BigNumber>;

  likeRewardsInTokens(overrides?: CallOverrides): Promise<BigNumber>;

  likePrice(overrides?: CallOverrides): Promise<BigNumber>;

  comission(overrides?: CallOverrides): Promise<BigNumber>;

  profilePrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    setPrices(
      _postPriceInTokens: PromiseOrValue<BigNumberish>,
      _repostPriceInTokens: PromiseOrValue<BigNumberish>,
      _likeRewardsInTokens: PromiseOrValue<BigNumberish>,
      _likePrice: PromiseOrValue<BigNumberish>,
      _comission: PromiseOrValue<BigNumberish>,
      _profilePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "post(string)"(
      _content: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "post(string,uint256)"(
      _content: PromiseOrValue<string>,
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    like(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProfile(string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProfile(string,string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProfile(string,string,string,string,bool)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProfile(string,string,string,string,bool,address)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProfile(string,string,string,string,bool,address,uint256)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      _nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    isValidContract(
      _type: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    postPriceInTokens(overrides?: CallOverrides): Promise<BigNumber>;

    repostPriceInTokens(overrides?: CallOverrides): Promise<BigNumber>;

    likeRewardsInTokens(overrides?: CallOverrides): Promise<BigNumber>;

    likePrice(overrides?: CallOverrides): Promise<BigNumber>;

    comission(overrides?: CallOverrides): Promise<BigNumber>;

    profilePrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    setPrices(
      _postPriceInTokens: PromiseOrValue<BigNumberish>,
      _repostPriceInTokens: PromiseOrValue<BigNumberish>,
      _likeRewardsInTokens: PromiseOrValue<BigNumberish>,
      _likePrice: PromiseOrValue<BigNumberish>,
      _comission: PromiseOrValue<BigNumberish>,
      _profilePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "post(string)"(
      _content: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "post(string,uint256)"(
      _content: PromiseOrValue<string>,
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    like(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProfile(string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProfile(string,string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProfile(string,string,string,string,bool)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProfile(string,string,string,string,bool,address)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProfile(string,string,string,string,bool,address,uint256)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      _nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValidContract(
      _type: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postPriceInTokens(overrides?: CallOverrides): Promise<BigNumber>;

    repostPriceInTokens(overrides?: CallOverrides): Promise<BigNumber>;

    likeRewardsInTokens(overrides?: CallOverrides): Promise<BigNumber>;

    likePrice(overrides?: CallOverrides): Promise<BigNumber>;

    comission(overrides?: CallOverrides): Promise<BigNumber>;

    profilePrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    setPrices(
      _postPriceInTokens: PromiseOrValue<BigNumberish>,
      _repostPriceInTokens: PromiseOrValue<BigNumberish>,
      _likeRewardsInTokens: PromiseOrValue<BigNumberish>,
      _likePrice: PromiseOrValue<BigNumberish>,
      _comission: PromiseOrValue<BigNumberish>,
      _profilePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "post(string)"(
      _content: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "post(string,uint256)"(
      _content: PromiseOrValue<string>,
      parentId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    like(
      _itemId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProfile(string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProfile(string,string,string,string)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProfile(string,string,string,string,bool)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProfile(string,string,string,string,bool,address)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProfile(string,string,string,string,bool,address,uint256)"(
      _name: PromiseOrValue<string>,
      _username: PromiseOrValue<string>,
      _bio: PromiseOrValue<string>,
      _imageUrl: PromiseOrValue<string>,
      _isNft: PromiseOrValue<boolean>,
      _nftContract: PromiseOrValue<string>,
      _nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValidContract(
      _type: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postPriceInTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repostPriceInTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    likeRewardsInTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    likePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profilePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
